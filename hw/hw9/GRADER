Name: Kevin Chau
Login: cs61b-mv
Homework 9 Part II:
Start by putting all of the cells in the maze in a list called V, which holds all the vertices of the graph (vertices have references to their maze position coordinate x and y). Then put all of the walls in a list called E, which represents the walls as an edge. Now pick a random x coordinate in the horizontal range of the maze using a random integer generator, and pick a random y coordinate in the vertical range of the maze using a random integer generator. Now start the DFS maze generator on the starting cell/vertex at (x,y) generated by the random integer generators by marking said cell as visited. Then generate a list of incident edges/walls on the cell that we are currently looking at (the start cell in this case). Randomly order the list of walls, using the method described in part 1 of the homework. For each wall we randomly visit incident on that cell, check if the cell on the other side of that wall has been visited. If it hasn't been visited, remove the wall connecting that cell from either the hWall array of vWall array, depending on the type of wall it is (by setting the array value at the wall's position to False). In the case that the neighboring cell on the otherside of the just removed wall is unvisited, union the two cells adjcent to that wall, and recursively call DFS on the new cell that is on the other side of the removed wall. 

a) This algorithm ensures that every pair of cells is connected by one path only by only removing a wall to a cell if that cell is unvisited. If it is already visited, then there is already a path of removed walls that connects it to whatever cell we started the DFS on, so there is no need to remove another wall to that cell when DFS looks at the wall. Also, DFS won't be recursively called unless we actually remove a wall to a newly discovered cell, which ensures that only unvisited cells are added to the maze. Similarly, it also avoid cycles because connecting an end-path maze cell to an already visited cell would create a cycle, but of course the algorithm avoids ever removing such walls to a previously visited cell.

b) Random integer generators are actually used in 3 different places in this algorithm, which increases the randomness of the maze's produced by this algorith. Specifically, it starts the DFS algorithm on a randomly chosen x and y coordinate in the maze. The x and y coordinates are decided with independent number generators. However, the start cell isn't what makes most of the randomness in this algorithm. What produces most of the variations in each maze construction is that the DFS randomly chooses which adjacent wall to look at, in a manner that mimics the random order algorithm in part I. It does this by first making a list of all the adjecent walls on the cell we are visiting, then using a random integer generator to swap random edges to the end of the list. This way everytime the maze constructor gets to a cell, the direction that the DFS does in is completely random. Using randomness in selecting the order to traverse walls and hence which cells to recursively use DFS on allows the algorithm to make very differnt mazes everytime.