/* Date.java */

import java.io.*;

class Date {

  /* Put your private data fields here. */
  private int month;
  private int day;
  private int year;

  /** Constructs a date with the given month, day and year.   If the date is
   *  not valid, the entire program will halt with an error message.
   *  @param month is a month, numbered in the range 1...12.
   *  @param day is between 1 and the number of days in the given month.
   *  @param year is the year in question, with no digits omitted.
   */
  public Date(int month, int day, int year) {
    if (Date.isValidDate(month, day, year)) {
      this.month = month;
      this.day = day;
      this.year = year;
    } else {
      System.out.println("Error: Cannot construct invalid date "+month+"/"+day+"/"+year+" 3...halting program...");
      System.exit(0);
    }
  }

  /** Constructs a Date object corresponding to the given string.
   *  @param s should be a string of the form "month/day/year" where month must
   *  be one or two digits, day must be one or two digits, and year must be
   *  between 1 and 4 digits.  If s does not match these requirements or is not
   *  a valid date, the program halts with an error message.
   */
  public Date(String s) {
    String[] stringDateArray = s.split("/");
    if (stringDateArray.length != 3) {
      System.out.println("Error: Date string not properly formatted...halting program...");
      System.exit(0);
    }
    try {
      this.month = Integer.parseInt(stringDateArray[0]);
    } catch (NumberFormatException nfe) {
      System.out.println("Error: Invalid month " +stringDateArray[0]+" ...halting program...");
      System.exit(0);
    }
    try {
      this.day = Integer.parseInt(stringDateArray[1]);
    } catch (NumberFormatException nfe) {
      System.out.println("Error: Invalid day " +stringDateArray[1]+" ...halting program...");
      System.exit(0);
    }
    try {
      this.year = Integer.parseInt(stringDateArray[2]);
    } catch (NumberFormatException nfe) {
      System.out.println("Error: Invalid year " +stringDateArray[2]+" ...halting program...");
      System.exit(0);
    }
    if (this.month<0||this.month>99){
      System.out.println("Error: Invalid month "+this.month+" ...halting program...");
      System.exit(0);
    }
    if (this.day<0||this.day>99){
      System.out.println("Error: Invalid day "+this.day+" ...halting program...");
      System.exit(0);
    }
    if (this.year<0||this.year>9999){
      System.out.println("Error: Invalid year "+this.year+" ...halting program...");
      System.exit(0);
    }
    if (false == Date.isValidDate(this.month, this.day, this.year)) {
      System.out.println("Error: Cannot construct invalid date "+this.month+"/"+this.day+"/"+this.year+" 3...halting program...");
      System.exit(0);
    }
  }

  /** Checks whether the given year is a leap year.
   *  @return true if and only if the input year is a leap year.
   */
  public static boolean isLeapYear(int year) {
    if (year%400==0){
      return true; 
    } else if (year%4==0){
        if (year%100==0){
            return false;
        }
        return true;
    }
    return false;                       // replace this line with your solution
  }

  /** Returns the number of days in a given month.
   *  @param month is a month, numbered in the range 1...12.
   *  @param year is the year in question, with no digits omitted.
   *  @return the number of days in the given month.
   */
  public static int daysInMonth(int month, int year) {
    //return 0;  
    int days;                         // replace this line with your solution
    switch (month) {
      case 2:
        if (Date.isLeapYear(year)) {
          days = 29;
        } else {
          days = 28;
        }
        break;
      case 4:
      case 6:
      case 9:
      case 11:
        days = 30;
        break;
      default:
        days = 31;
        break;
    }
    return days;
  }

  /** Checks whether the given date is valid.
   *  @return true if and only if month/day/year constitute a valid date.
   *
   *  Years prior to A.D. 1 are NOT valid.
   */
  public static boolean isValidDate(int month, int day, int year) {
    //return true;                        // replace this line with your solution
    if (year<1){
      return false;
    } else if (month<1||month>12){
      return false;
    } else if (day>31){
      return false;
    }
    boolean bool;
    switch (month) {
      case 2:
        if (Date.isLeapYear(year)) {
          if (day<=29){
            bool = true;
          } else {
            bool = false;
          }
        } else {
            if (day<=28) {
              bool = true;
          } else {
              bool = false;
          }
        }
        break;
      case 4:
      case 6:
      case 9:
      case 11:
        if (day<=30){
            bool = true;
          } else {
            bool = false;
          }
        break;
      default:
        if (day<=31){
            bool = true;
          } else {
            bool = false;
        }
        break;
    } 
    return bool;
  }

  /** Returns a string representation of this date in the form month/day/year.
   *  The month, day, and year are expressed in full as integers; for example,
   *  12/7/2006 or 3/21/407.
   *  @return a String representation of this date.
   */
  public String toString() {
    //return "stuff";                     // replace this line with your solution
    return this.month+"/"+this.day+"/"+this.year;
  }

  /** Determines whether this Date is before the Date d.
   *  @return true if and only if this Date is before d. 
   */
  public boolean isBefore(Date d) {
    //return true;                        // replace this line with your solution
    if (this.year<d.year) {
      return true;
    } 
    else if (d.year==this.year) {
        if (this.month<d.month){
          return true;
        } else if (this.month == d.month) {
            if (this.day<d.day){
              return true;
            } else {
              return false;
            }
        } else {
          return false;
        }
    } else {
        return false;
    }
  }

  /** Determines whether this Date is after the Date d.
   *  @return true if and only if this Date is after d. 
   */
  public boolean isAfter(Date d) {
    //return true;                        // replace this line with your solution
    return !isBefore(d)&&this.day>d.day;
  }

  /** Returns the number of this Date in the year.
   *  @return a number n in the range 1...366, inclusive, such that this Date
   *  is the nth day of its year.  (366 is used only for December 31 in a leap
   *  year.)
   */
  public int dayInYear() {
    //return 0;                           // replace this line with your solution
    int dayNumber=0;
    
    switch (this.month) {
        case 1:
          dayNumber= this.day;
          break;
        case 2:
          dayNumber= 31+this.day;
          break;
        case 3:
          dayNumber= 59+this.day;
          break;
        case 4:
          dayNumber= 90+this.day;
          break;
        case 5:
          dayNumber= 120+this.day;
          break;
        case 6:
          dayNumber= 151+this.day;
          break;
        case 7:
          dayNumber= 181+this.day;
          break;
        case 8:
          dayNumber= 212+this.day;
          break;
        case 9:
          dayNumber= 243+this.day;
          break;
        case 10:
          dayNumber= 273+this.day;
          break;
        case 11:
          dayNumber= 304+this.day;
          break;
        case 12:
          dayNumber= 334+this.day;
          break;
    }
    if (Date.isLeapYear(this.year)) {
      if (this.month>2) {
          dayNumber++;
      }
    }
    return dayNumber;

  } 

  /** Determines the difference in days between d and this Date.  For example,
   *  if this Date is 12/15/2012 and d is 12/14/2012, the difference is 1.
   *  If this Date occurs before d, the result is negative.
   *  @return the difference in days between d and this date.
   */
  public int difference(Date d) {
    //return 0;                           // replace this line with your solution
    if (this.year == d.year) {
      return this.dayInYear()-d.dayInYear();
    } else if (this.year > d.year) {
      int beforeYear = d.year;
      int days = new Date(12,31,d.year).dayInYear()-d.dayInYear();
      beforeYear = d.year + 1;
      while (this.year-beforeYear>0) {
        days = days + new Date(12,31,beforeYear).dayInYear();
        beforeYear++;
      }
      days = days + this.dayInYear();
      return days;
    } else {
      int beforeYear = this.year;
      int days = new Date(12,31,this.year).dayInYear()-this.dayInYear();
      beforeYear = this.year+1;
      while(d.year-beforeYear>0){
        days = days + new Date(12,31,beforeYear).dayInYear();
        beforeYear++;
      }
      days = days + d.dayInYear();
      return -days;
    }
  }

  public static void main(String[] argv) {
    System.out.println("\nTesting constructors.");
    Date d1 = new Date(1, 1, 1);
    System.out.println("Date should be 1/1/1: " + d1);
    d1 = new Date("2/4/2");
    System.out.println("Date should be 2/4/2: " + d1);
    d1 = new Date("2/29/2000");
    System.out.println("Date should be 2/29/2000: " + d1);
    d1 = new Date("2/29/1904");
    System.out.println("Date should be 2/29/1904: " + d1);

    d1 = new Date(12, 31, 1975);
    System.out.println("Date should be 12/31/1975: " + d1);
    Date d2 = new Date("1/1/1976");
    System.out.println("Date should be 1/1/1976: " + d2);
    Date d3 = new Date("1/2/1976");
    System.out.println("Date should be 1/2/1976: " + d3);

    Date d4 = new Date("2/27/1977");
    Date d5 = new Date("8/31/2110");

    //isLeapYear tests
    System.out.println("\nisLeapYear(4):" + Date.isLeapYear(4));
    System.out.println("isLeapYear(3):" + Date.isLeapYear(3));
    System.out.println("isLeapYear(1800):" + Date.isLeapYear(1800));
    System.out.println("isLeapYear(1900):" + Date.isLeapYear(1900));
    System.out.println("isLeapYear(1600):" + Date.isLeapYear(1600));
    System.out.println("isLeapYear(2000):" + Date.isLeapYear(2000));
    System.out.println("Days in February, 1800:" + Date.daysInMonth(2, 1800));
    System.out.println("Days in February, 2012:" + Date.daysInMonth(2, 2012));
    System.out.println("1/1/0 is valid? " + Date.isValidDate(1,1,0));
    System.out.println("2/29/2013 is valid? " + Date.isValidDate(2,29,2013));
    System.out.println("11/32/2013 is valid? " + Date.isValidDate(11,32,2013));
    System.out.println("1/1/2014 is valid? " + Date.isValidDate(1,1,2014));
    System.out.println("4/31/2014 is valid? " + Date.isValidDate(4,31,2014));


    System.out.println("\nTesting before and after.");
    System.out.println(d2 + " after " + d1 + " should be true: " + 
                       d2.isAfter(d1));
    System.out.println(d3 + " after " + d2 + " should be true: " + 
                       d3.isAfter(d2));
    System.out.println(d1 + " after " + d1 + " should be false: " + 
                       d1.isAfter(d1));
    System.out.println(d1 + " after " + d2 + " should be false: " + 
                       d1.isAfter(d2));
    System.out.println(d2 + " after " + d3 + " should be false: " + 
                       d2.isAfter(d3));

    System.out.println(d1 + " before " + d2 + " should be true: " + 
                       d1.isBefore(d2));
    System.out.println(d2 + " before " + d3 + " should be true: " + 
                       d2.isBefore(d3));
    System.out.println(d1 + " before " + d1 + " should be false: " + 
                       d1.isBefore(d1));
    System.out.println(d2 + " before " + d1 + " should be false: " + 
                       d2.isBefore(d1));
    System.out.println(d3 + " before " + d2 + " should be false: " + 
                       d3.isBefore(d2));

    System.out.println("\nTesting difference.");
    System.out.println(d1 + " - " + d1  + " should be 0: " + 
                       d1.difference(d1));
    System.out.println(d2 + " - " + d1  + " should be 1: " + 
                       d2.difference(d1));
    System.out.println(d3 + " - " + d1  + " should be 2: " + 
                       d3.difference(d1));
    System.out.println(d3 + " - " + d4  + " should be -422: " + 
                       d3.difference(d4));
    System.out.println(d5 + " - " + d4  + " should be 48762: " + 
                       d5.difference(d4));

    Date validDate1 = new Date("1/2/2015");
    Date validDate2 = new Date(3,5,2011);
    System.out.println("March 5th is day "+validDate2.dayInYear()+" in 2011");
    Date validDate3 = new Date(3,5,2012);
    System.out.println("March 5th is day "+validDate3.dayInYear()+" in 2012");
    //Date invalidDate2 = new Date("201/32/1093");
    //Date invalidDate3 = new Date("20/221/1093");
    //Date invalidDate4 = new Date("20/32/10933");
    //Date invalidDate1 = new Date(2,29,2013);
    //Date invalidDate5 = new Date("12/2/hello");
    //Date invalidDate6 = new Date("8/3/");
    //Date invalidDate6 = new Date("11/4/2013 AD");
    Date validDate7 = new Date("012/23/2014");  //leading zeros are allowed. 
    System.out.println(new Date(12,31,2011).dayInYear());
  }
}